/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.8).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Error;
import io.swagger.model.StatusJob;
import java.util.UUID;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2019-06-06T16:32:15.795+02:00[Europe/Brussels]")
@Api(value = "jobs", description = "the jobs API")
public interface JobsApi {

    @ApiOperation(value = "Get a solution", nickname = "getSolution", notes = "", response = Object.class, authorizations = {
        @Authorization(value = "bearerAuth")    }, tags={ "Shift API","Task API", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "search results matching criteria", response = Object.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 404, message = "The specified resource was not found", response = Error.class) })
    @RequestMapping(value = "/jobs/{jobId}/solution",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Object> getSolution(@ApiParam(value = "Job ID",required=true) @PathVariable("jobId") UUID jobId);


    @ApiOperation(value = "Get a status", nickname = "getStatus", notes = "", response = StatusJob.class, authorizations = {
        @Authorization(value = "bearerAuth")    }, tags={ "Shift API","Task API", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "get job status", response = StatusJob.class),
        @ApiResponse(code = 400, message = "bad input parameter") })
    @RequestMapping(value = "/jobs/{jobId}/status",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<StatusJob> getStatus(@ApiParam(value = "Job ID",required=true) @PathVariable("jobId") UUID jobId);

}

# coding: utf-8

"""
    Workforce Optimisation API

    Solver engine for solving workforce optimisation problems through the Solvice Optimisation API Platform.  # Workforce Optimisation   Creating an optimal roster for a team of employees based on forecasted demand and taking into account extensive labor agreement rules & constraints.   The Solvice Workforce Optimisation API consists of the following RESTful web services:  * [Shift Planning API](#tag/shift)  * [Task Planning API](#tag/task)  ### Getting started  1. To use one of these APIs, you require an API key. Sign up [here](https://www.solvice.io/onshift/register) to get one.  2. Read the documentation of the desired API below.  3. Start using the API.  To use our Workforce Optimisation API commercially, you can subscribe to a paid plan [here](https://www.solvice.io/onshift/api#pricing).  ### Problems or Questions? If you have problems or questions, we offer you the following options:  * [FAQ](https://www.solvice.io/faq)  * [Open ticket]()  * [Contact us](https://www.solvice.io/contact)  ### Keep up-to-date To get informed about the newest features and development follow us at [twitter](https://twitter.com/solvice_io/). Furthermore you can watch [this git repository](https://github.com/solvice/workforce-api-docs) of this documentation, sign up at our [dashboard](https://dashboard.solvice.io/).   # SDKs  For easier integration start by picking a client library in your language of choice:   - [Java SDK]()  - [Javascript SDK]()  - [Csharp SDK ]()  - [PHP SDK]()     # Explore our APIs   #### Insomnia  To explore our APIs with [Insomnia](https://insomnia.rest/), follow these steps: 1. Open Insomnia and Import [our workspace](https://raw.githubusercontent.com/solvice/workforce-api-docs/master/web/restclients/onshift-insomnia.json). 2. Sign up to get an API key and specify it in your workspace: Manage Environments -> Base Environment -> \"JWT token\": your API key 3. Start exploring  #### Postman To explore our APIs with [Postman](https://www.getpostman.com/), follow these steps: 1. Import our [request collections](https://raw.githubusercontent.com/solvice/workforce-api-doc/master/web/restclients/onshift.postman_collection.json) as well as our [environment file](https://raw.githubusercontent.com/solvice/workforce-api-docs/master/web/restclients/onshift-postman.json). 2. Sign up to get an API key and specify it in your environment: \"api_key\": your API key 3. Start exploring   # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: info@solvice.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.demand import Demand  # noqa: F401,E501
from swagger_client.models.employee import Employee  # noqa: F401,E501
from swagger_client.models.shift_assignment import ShiftAssignment  # noqa: F401,E501
from swagger_client.models.solve_job import SolveJob  # noqa: F401,E501
from swagger_client.models.solver import Solver  # noqa: F401,E501
from swagger_client.models.statute import Statute  # noqa: F401,E501


class ShiftRequest(SolveJob):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'demand': 'list[Demand]',
        'employees': 'list[Employee]',
        'statutes': 'list[Statute]',
        'assignments': 'list[ShiftAssignment]'
    }

    attribute_map = {
        'demand': 'demand',
        'employees': 'employees',
        'statutes': 'statutes',
        'assignments': 'assignments'
    }

    def __init__(self, demand=None, employees=None, statutes=None, assignments=None):  # noqa: E501
        """ShiftRequest - a model defined in Swagger"""  # noqa: E501
        self._demand = None
        self._employees = None
        self._statutes = None
        self._assignments = None
        self.discriminator = None
        self.demand = demand
        self.employees = employees
        self.statutes = statutes
        if assignments is not None:
            self.assignments = assignments

    @property
    def demand(self):
        """Gets the demand of this ShiftRequest.  # noqa: E501

        Demand blocks for which a certain number of employees by a certain skill and on a certain location are required.  # noqa: E501

        :return: The demand of this ShiftRequest.  # noqa: E501
        :rtype: list[Demand]
        """
        return self._demand

    @demand.setter
    def demand(self, demand):
        """Sets the demand of this ShiftRequest.

        Demand blocks for which a certain number of employees by a certain skill and on a certain location are required.  # noqa: E501

        :param demand: The demand of this ShiftRequest.  # noqa: E501
        :type: list[Demand]
        """
        if demand is None:
            raise ValueError("Invalid value for `demand`, must not be `None`")  # noqa: E501

        self._demand = demand

    @property
    def employees(self):
        """Gets the employees of this ShiftRequest.  # noqa: E501

        Group of employees available to be planned in the planning period defined by the demand.  # noqa: E501

        :return: The employees of this ShiftRequest.  # noqa: E501
        :rtype: list[Employee]
        """
        return self._employees

    @employees.setter
    def employees(self, employees):
        """Sets the employees of this ShiftRequest.

        Group of employees available to be planned in the planning period defined by the demand.  # noqa: E501

        :param employees: The employees of this ShiftRequest.  # noqa: E501
        :type: list[Employee]
        """
        if employees is None:
            raise ValueError("Invalid value for `employees`, must not be `None`")  # noqa: E501

        self._employees = employees

    @property
    def statutes(self):
        """Gets the statutes of this ShiftRequest.  # noqa: E501

        Statute definitions used by employees.  # noqa: E501

        :return: The statutes of this ShiftRequest.  # noqa: E501
        :rtype: list[Statute]
        """
        return self._statutes

    @statutes.setter
    def statutes(self, statutes):
        """Sets the statutes of this ShiftRequest.

        Statute definitions used by employees.  # noqa: E501

        :param statutes: The statutes of this ShiftRequest.  # noqa: E501
        :type: list[Statute]
        """
        if statutes is None:
            raise ValueError("Invalid value for `statutes`, must not be `None`")  # noqa: E501

        self._statutes = statutes

    @property
    def assignments(self):
        """Gets the assignments of this ShiftRequest.  # noqa: E501

        Pre made assignments that the solver should take into account  # noqa: E501

        :return: The assignments of this ShiftRequest.  # noqa: E501
        :rtype: list[ShiftAssignment]
        """
        return self._assignments

    @assignments.setter
    def assignments(self, assignments):
        """Sets the assignments of this ShiftRequest.

        Pre made assignments that the solver should take into account  # noqa: E501

        :param assignments: The assignments of this ShiftRequest.  # noqa: E501
        :type: list[ShiftAssignment]
        """

        self._assignments = assignments

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ShiftRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ShiftRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Workforce Optimisation API

    Solver engine for solving workforce optimisation problems through the Solvice Optimisation API Platform.  # Workforce Optimisation   Creating an optimal roster for a team of employees based on forecasted demand and taking into account extensive labor agreement rules & constraints.   The Solvice Workforce Optimisation API consists of the following RESTful web services:  * [Shift Planning API](#tag/shift)  * [Task Planning API](#tag/task)  ### Getting started  1. To use one of these APIs, you require an API key. Sign up [here](https://www.solvice.io/onshift/register) to get one.  2. Read the documentation of the desired API below.  3. Start using the API.  To use our Workforce Optimisation API commercially, you can subscribe to a paid plan [here](https://www.solvice.io/onshift/api#pricing).  ### Problems or Questions? If you have problems or questions, we offer you the following options:  * [FAQ](https://www.solvice.io/faq)  * [Open ticket]()  * [Contact us](https://www.solvice.io/contact)  ### Keep up-to-date To get informed about the newest features and development follow us at [twitter](https://twitter.com/solvice_io/). Furthermore you can watch [this git repository](https://github.com/solvice/workforce-api-docs) of this documentation, sign up at our [dashboard](https://dashboard.solvice.io/).   # SDKs  For easier integration start by picking a client library in your language of choice:   - [Java SDK]()  - [Javascript SDK]()  - [Csharp SDK ]()  - [PHP SDK]()     # Explore our APIs   #### Insomnia  To explore our APIs with [Insomnia](https://insomnia.rest/), follow these steps: 1. Open Insomnia and Import [our workspace](https://raw.githubusercontent.com/solvice/workforce-api-docs/master/web/restclients/onshift-insomnia.json). 2. Sign up to get an API key and specify it in your workspace: Manage Environments -> Base Environment -> \"JWT token\": your API key 3. Start exploring  #### Postman To explore our APIs with [Postman](https://www.getpostman.com/), follow these steps: 1. Import our [request collections](https://raw.githubusercontent.com/solvice/workforce-api-doc/master/web/restclients/onshift.postman_collection.json) as well as our [environment file](https://raw.githubusercontent.com/solvice/workforce-api-docs/master/web/restclients/onshift-postman.json). 2. Sign up to get an API key and specify it in your environment: \"api_key\": your API key 3. Start exploring   # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: info@solvice.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ShiftAssignment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_date': 'date',
        'employee': 'str',
        'skill': 'str',
        'start_date_time': 'datetime',
        'end_date_time': 'datetime',
        'locked': 'bool'
    }

    attribute_map = {
        '_date': 'date',
        'employee': 'employee',
        'skill': 'skill',
        'start_date_time': 'startDateTime',
        'end_date_time': 'endDateTime',
        'locked': 'locked'
    }

    def __init__(self, _date=None, employee=None, skill=None, start_date_time=None, end_date_time=None, locked=None):  # noqa: E501
        """ShiftAssignment - a model defined in Swagger"""  # noqa: E501
        self.__date = None
        self._employee = None
        self._skill = None
        self._start_date_time = None
        self._end_date_time = None
        self._locked = None
        self.discriminator = None
        if _date is not None:
            self._date = _date
        if employee is not None:
            self.employee = employee
        if skill is not None:
            self.skill = skill
        if start_date_time is not None:
            self.start_date_time = start_date_time
        if end_date_time is not None:
            self.end_date_time = end_date_time
        if locked is not None:
            self.locked = locked

    @property
    def _date(self):
        """Gets the _date of this ShiftAssignment.  # noqa: E501

        Date of the assignment  # noqa: E501

        :return: The _date of this ShiftAssignment.  # noqa: E501
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this ShiftAssignment.

        Date of the assignment  # noqa: E501

        :param _date: The _date of this ShiftAssignment.  # noqa: E501
        :type: date
        """

        self.__date = _date

    @property
    def employee(self):
        """Gets the employee of this ShiftAssignment.  # noqa: E501

        Employee name  # noqa: E501

        :return: The employee of this ShiftAssignment.  # noqa: E501
        :rtype: str
        """
        return self._employee

    @employee.setter
    def employee(self, employee):
        """Sets the employee of this ShiftAssignment.

        Employee name  # noqa: E501

        :param employee: The employee of this ShiftAssignment.  # noqa: E501
        :type: str
        """

        self._employee = employee

    @property
    def skill(self):
        """Gets the skill of this ShiftAssignment.  # noqa: E501

        Skill name  # noqa: E501

        :return: The skill of this ShiftAssignment.  # noqa: E501
        :rtype: str
        """
        return self._skill

    @skill.setter
    def skill(self, skill):
        """Sets the skill of this ShiftAssignment.

        Skill name  # noqa: E501

        :param skill: The skill of this ShiftAssignment.  # noqa: E501
        :type: str
        """

        self._skill = skill

    @property
    def start_date_time(self):
        """Gets the start_date_time of this ShiftAssignment.  # noqa: E501

        Date time of the start of the assignment  # noqa: E501

        :return: The start_date_time of this ShiftAssignment.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date_time

    @start_date_time.setter
    def start_date_time(self, start_date_time):
        """Sets the start_date_time of this ShiftAssignment.

        Date time of the start of the assignment  # noqa: E501

        :param start_date_time: The start_date_time of this ShiftAssignment.  # noqa: E501
        :type: datetime
        """

        self._start_date_time = start_date_time

    @property
    def end_date_time(self):
        """Gets the end_date_time of this ShiftAssignment.  # noqa: E501

        Date time of the start of the assignment  # noqa: E501

        :return: The end_date_time of this ShiftAssignment.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date_time

    @end_date_time.setter
    def end_date_time(self, end_date_time):
        """Sets the end_date_time of this ShiftAssignment.

        Date time of the start of the assignment  # noqa: E501

        :param end_date_time: The end_date_time of this ShiftAssignment.  # noqa: E501
        :type: datetime
        """

        self._end_date_time = end_date_time

    @property
    def locked(self):
        """Gets the locked of this ShiftAssignment.  # noqa: E501

        Date time of the start of the assignment  # noqa: E501

        :return: The locked of this ShiftAssignment.  # noqa: E501
        :rtype: bool
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """Sets the locked of this ShiftAssignment.

        Date time of the start of the assignment  # noqa: E501

        :param locked: The locked of this ShiftAssignment.  # noqa: E501
        :type: bool
        """

        self._locked = locked

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ShiftAssignment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ShiftAssignment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

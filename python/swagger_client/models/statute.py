# coding: utf-8

"""
    Workforce Optimisation API

    Solver engine for solving workforce optimisation problems through the Solvice Optimisation API Platform.  # Workforce Optimisation   Creating an optimal roster for a team of employees based on forecasted demand and taking into account extensive labor agreement rules & constraints.   The Solvice Workforce Optimisation API consists of the following RESTful web services:  * [Shift Planning API](#tag/shift)  * [Task Planning API](#tag/task)  ### Getting started  1. To use one of these APIs, you require an API key. Sign up [here](https://www.solvice.io/onshift/register) to get one.  2. Read the documentation of the desired API below.  3. Start using the API.  To use our Workforce Optimisation API commercially, you can subscribe to a paid plan [here](https://www.solvice.io/onshift/api#pricing).  ### Problems or Questions? If you have problems or questions, we offer you the following options:  * [FAQ](https://www.solvice.io/faq)  * [Open ticket]()  * [Contact us](https://www.solvice.io/contact)  ### Keep up-to-date To get informed about the newest features and development follow us at [twitter](https://twitter.com/solvice_io/). Furthermore you can watch [this git repository](https://github.com/solvice/workforce-api-docs) of this documentation, sign up at our [dashboard](https://dashboard.solvice.io/).   # SDKs  For easier integration start by picking a client library in your language of choice:   - [Java SDK]()  - [Javascript SDK]()  - [Csharp SDK ]()  - [PHP SDK]()     # Explore our APIs   #### Insomnia  To explore our APIs with [Insomnia](https://insomnia.rest/), follow these steps: 1. Open Insomnia and Import [our workspace](https://raw.githubusercontent.com/solvice/workforce-api-docs/master/web/restclients/onshift-insomnia.json). 2. Sign up to get an API key and specify it in your workspace: Manage Environments -> Base Environment -> \"JWT token\": your API key 3. Start exploring  #### Postman To explore our APIs with [Postman](https://www.getpostman.com/), follow these steps: 1. Import our [request collections](https://raw.githubusercontent.com/solvice/workforce-api-doc/master/web/restclients/onshift.postman_collection.json) as well as our [environment file](https://raw.githubusercontent.com/solvice/workforce-api-docs/master/web/restclients/onshift-postman.json). 2. Sign up to get an API key and specify it in your environment: \"api_key\": your API key 3. Start exploring   # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: info@solvice.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.big_decimal import BigDecimal  # noqa: F401,E501


class Statute(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'min_shift_length': 'int',
        'max_shift_length': 'int',
        'min_rest_between_shifts': 'int',
        'max_consecutive_work_days': 'int',
        'max_hrs_per_week': 'int',
        'min_hrs_per_week': 'int',
        'shift_start': 'BigDecimal',
        'latest_shift_start': 'BigDecimal',
        'shift_end': 'BigDecimal',
        'min_hours_month': 'int',
        'max_hours_month': 'int',
        'over_time_threshold1': 'BigDecimal',
        'over_time_raise1': 'BigDecimal',
        'over_time_threshold2': 'BigDecimal',
        'over_time_raise2': 'BigDecimal',
        'over_time_weekly_threshold1': 'BigDecimal',
        'over_time_weekly_raise1': 'BigDecimal',
        'nightly_threshold1': 'BigDecimal',
        'nightly_raise': 'BigDecimal'
    }

    attribute_map = {
        'name': 'name',
        'min_shift_length': 'minShiftLength',
        'max_shift_length': 'maxShiftLength',
        'min_rest_between_shifts': 'minRestBetweenShifts',
        'max_consecutive_work_days': 'maxConsecutiveWorkDays',
        'max_hrs_per_week': 'maxHrsPerWeek',
        'min_hrs_per_week': 'minHrsPerWeek',
        'shift_start': 'shiftStart',
        'latest_shift_start': 'latestShiftStart',
        'shift_end': 'shiftEnd',
        'min_hours_month': 'minHoursMonth',
        'max_hours_month': 'maxHoursMonth',
        'over_time_threshold1': 'overTimeThreshold1',
        'over_time_raise1': 'overTimeRaise1',
        'over_time_threshold2': 'overTimeThreshold2',
        'over_time_raise2': 'overTimeRaise2',
        'over_time_weekly_threshold1': 'overTimeWeeklyThreshold1',
        'over_time_weekly_raise1': 'overTimeWeeklyRaise1',
        'nightly_threshold1': 'nightlyThreshold1',
        'nightly_raise': 'nightlyRaise'
    }

    def __init__(self, name=None, min_shift_length=None, max_shift_length=None, min_rest_between_shifts=None, max_consecutive_work_days=None, max_hrs_per_week=None, min_hrs_per_week=None, shift_start=None, latest_shift_start=None, shift_end=None, min_hours_month=None, max_hours_month=None, over_time_threshold1=None, over_time_raise1=None, over_time_threshold2=None, over_time_raise2=None, over_time_weekly_threshold1=None, over_time_weekly_raise1=None, nightly_threshold1=None, nightly_raise=None):  # noqa: E501
        """Statute - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._min_shift_length = None
        self._max_shift_length = None
        self._min_rest_between_shifts = None
        self._max_consecutive_work_days = None
        self._max_hrs_per_week = None
        self._min_hrs_per_week = None
        self._shift_start = None
        self._latest_shift_start = None
        self._shift_end = None
        self._min_hours_month = None
        self._max_hours_month = None
        self._over_time_threshold1 = None
        self._over_time_raise1 = None
        self._over_time_threshold2 = None
        self._over_time_raise2 = None
        self._over_time_weekly_threshold1 = None
        self._over_time_weekly_raise1 = None
        self._nightly_threshold1 = None
        self._nightly_raise = None
        self.discriminator = None
        self.name = name
        if min_shift_length is not None:
            self.min_shift_length = min_shift_length
        if max_shift_length is not None:
            self.max_shift_length = max_shift_length
        if min_rest_between_shifts is not None:
            self.min_rest_between_shifts = min_rest_between_shifts
        if max_consecutive_work_days is not None:
            self.max_consecutive_work_days = max_consecutive_work_days
        if max_hrs_per_week is not None:
            self.max_hrs_per_week = max_hrs_per_week
        if min_hrs_per_week is not None:
            self.min_hrs_per_week = min_hrs_per_week
        if shift_start is not None:
            self.shift_start = shift_start
        if latest_shift_start is not None:
            self.latest_shift_start = latest_shift_start
        if shift_end is not None:
            self.shift_end = shift_end
        if min_hours_month is not None:
            self.min_hours_month = min_hours_month
        if max_hours_month is not None:
            self.max_hours_month = max_hours_month
        if over_time_threshold1 is not None:
            self.over_time_threshold1 = over_time_threshold1
        if over_time_raise1 is not None:
            self.over_time_raise1 = over_time_raise1
        if over_time_threshold2 is not None:
            self.over_time_threshold2 = over_time_threshold2
        if over_time_raise2 is not None:
            self.over_time_raise2 = over_time_raise2
        if over_time_weekly_threshold1 is not None:
            self.over_time_weekly_threshold1 = over_time_weekly_threshold1
        if over_time_weekly_raise1 is not None:
            self.over_time_weekly_raise1 = over_time_weekly_raise1
        if nightly_threshold1 is not None:
            self.nightly_threshold1 = nightly_threshold1
        if nightly_raise is not None:
            self.nightly_raise = nightly_raise

    @property
    def name(self):
        """Gets the name of this Statute.  # noqa: E501

        Unique name for a definition of a statute.  # noqa: E501

        :return: The name of this Statute.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Statute.

        Unique name for a definition of a statute.  # noqa: E501

        :param name: The name of this Statute.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def min_shift_length(self):
        """Gets the min_shift_length of this Statute.  # noqa: E501

        The minimum number of hours in a shift for an employee  # noqa: E501

        :return: The min_shift_length of this Statute.  # noqa: E501
        :rtype: int
        """
        return self._min_shift_length

    @min_shift_length.setter
    def min_shift_length(self, min_shift_length):
        """Sets the min_shift_length of this Statute.

        The minimum number of hours in a shift for an employee  # noqa: E501

        :param min_shift_length: The min_shift_length of this Statute.  # noqa: E501
        :type: int
        """

        self._min_shift_length = min_shift_length

    @property
    def max_shift_length(self):
        """Gets the max_shift_length of this Statute.  # noqa: E501

        The maximum number of hours in a shift for an employee  # noqa: E501

        :return: The max_shift_length of this Statute.  # noqa: E501
        :rtype: int
        """
        return self._max_shift_length

    @max_shift_length.setter
    def max_shift_length(self, max_shift_length):
        """Sets the max_shift_length of this Statute.

        The maximum number of hours in a shift for an employee  # noqa: E501

        :param max_shift_length: The max_shift_length of this Statute.  # noqa: E501
        :type: int
        """

        self._max_shift_length = max_shift_length

    @property
    def min_rest_between_shifts(self):
        """Gets the min_rest_between_shifts of this Statute.  # noqa: E501

        The minimum duration (in hours) of a rest period between two shifts for this employee  # noqa: E501

        :return: The min_rest_between_shifts of this Statute.  # noqa: E501
        :rtype: int
        """
        return self._min_rest_between_shifts

    @min_rest_between_shifts.setter
    def min_rest_between_shifts(self, min_rest_between_shifts):
        """Sets the min_rest_between_shifts of this Statute.

        The minimum duration (in hours) of a rest period between two shifts for this employee  # noqa: E501

        :param min_rest_between_shifts: The min_rest_between_shifts of this Statute.  # noqa: E501
        :type: int
        """

        self._min_rest_between_shifts = min_rest_between_shifts

    @property
    def max_consecutive_work_days(self):
        """Gets the max_consecutive_work_days of this Statute.  # noqa: E501

        The maximum days consecutive that this employee can be working  # noqa: E501

        :return: The max_consecutive_work_days of this Statute.  # noqa: E501
        :rtype: int
        """
        return self._max_consecutive_work_days

    @max_consecutive_work_days.setter
    def max_consecutive_work_days(self, max_consecutive_work_days):
        """Sets the max_consecutive_work_days of this Statute.

        The maximum days consecutive that this employee can be working  # noqa: E501

        :param max_consecutive_work_days: The max_consecutive_work_days of this Statute.  # noqa: E501
        :type: int
        """

        self._max_consecutive_work_days = max_consecutive_work_days

    @property
    def max_hrs_per_week(self):
        """Gets the max_hrs_per_week of this Statute.  # noqa: E501

        The maximum number of hours this employee can be working in a week  # noqa: E501

        :return: The max_hrs_per_week of this Statute.  # noqa: E501
        :rtype: int
        """
        return self._max_hrs_per_week

    @max_hrs_per_week.setter
    def max_hrs_per_week(self, max_hrs_per_week):
        """Sets the max_hrs_per_week of this Statute.

        The maximum number of hours this employee can be working in a week  # noqa: E501

        :param max_hrs_per_week: The max_hrs_per_week of this Statute.  # noqa: E501
        :type: int
        """

        self._max_hrs_per_week = max_hrs_per_week

    @property
    def min_hrs_per_week(self):
        """Gets the min_hrs_per_week of this Statute.  # noqa: E501

        The minimum number of hours this employee should be working in a week  # noqa: E501

        :return: The min_hrs_per_week of this Statute.  # noqa: E501
        :rtype: int
        """
        return self._min_hrs_per_week

    @min_hrs_per_week.setter
    def min_hrs_per_week(self, min_hrs_per_week):
        """Sets the min_hrs_per_week of this Statute.

        The minimum number of hours this employee should be working in a week  # noqa: E501

        :param min_hrs_per_week: The min_hrs_per_week of this Statute.  # noqa: E501
        :type: int
        """

        self._min_hrs_per_week = min_hrs_per_week

    @property
    def shift_start(self):
        """Gets the shift_start of this Statute.  # noqa: E501

        The earliest this employee can start working (expressed as decimal in 24 hour-format)  # noqa: E501

        :return: The shift_start of this Statute.  # noqa: E501
        :rtype: BigDecimal
        """
        return self._shift_start

    @shift_start.setter
    def shift_start(self, shift_start):
        """Sets the shift_start of this Statute.

        The earliest this employee can start working (expressed as decimal in 24 hour-format)  # noqa: E501

        :param shift_start: The shift_start of this Statute.  # noqa: E501
        :type: BigDecimal
        """

        self._shift_start = shift_start

    @property
    def latest_shift_start(self):
        """Gets the latest_shift_start of this Statute.  # noqa: E501

        The latest this employee can start working (expressed as decimal in 24 hour-format)  # noqa: E501

        :return: The latest_shift_start of this Statute.  # noqa: E501
        :rtype: BigDecimal
        """
        return self._latest_shift_start

    @latest_shift_start.setter
    def latest_shift_start(self, latest_shift_start):
        """Sets the latest_shift_start of this Statute.

        The latest this employee can start working (expressed as decimal in 24 hour-format)  # noqa: E501

        :param latest_shift_start: The latest_shift_start of this Statute.  # noqa: E501
        :type: BigDecimal
        """

        self._latest_shift_start = latest_shift_start

    @property
    def shift_end(self):
        """Gets the shift_end of this Statute.  # noqa: E501

        The latest this employee can work on a day (expressed as decimal in 24 hour-format)  # noqa: E501

        :return: The shift_end of this Statute.  # noqa: E501
        :rtype: BigDecimal
        """
        return self._shift_end

    @shift_end.setter
    def shift_end(self, shift_end):
        """Sets the shift_end of this Statute.

        The latest this employee can work on a day (expressed as decimal in 24 hour-format)  # noqa: E501

        :param shift_end: The shift_end of this Statute.  # noqa: E501
        :type: BigDecimal
        """

        self._shift_end = shift_end

    @property
    def min_hours_month(self):
        """Gets the min_hours_month of this Statute.  # noqa: E501

        The minimum hours per month this employee should be working  # noqa: E501

        :return: The min_hours_month of this Statute.  # noqa: E501
        :rtype: int
        """
        return self._min_hours_month

    @min_hours_month.setter
    def min_hours_month(self, min_hours_month):
        """Sets the min_hours_month of this Statute.

        The minimum hours per month this employee should be working  # noqa: E501

        :param min_hours_month: The min_hours_month of this Statute.  # noqa: E501
        :type: int
        """

        self._min_hours_month = min_hours_month

    @property
    def max_hours_month(self):
        """Gets the max_hours_month of this Statute.  # noqa: E501

        The maximum hours per month this employee should be working  # noqa: E501

        :return: The max_hours_month of this Statute.  # noqa: E501
        :rtype: int
        """
        return self._max_hours_month

    @max_hours_month.setter
    def max_hours_month(self, max_hours_month):
        """Sets the max_hours_month of this Statute.

        The maximum hours per month this employee should be working  # noqa: E501

        :param max_hours_month: The max_hours_month of this Statute.  # noqa: E501
        :type: int
        """

        self._max_hours_month = max_hours_month

    @property
    def over_time_threshold1(self):
        """Gets the over_time_threshold1 of this Statute.  # noqa: E501

        The first time threshold for overtime (expressed as decimal in 24 hour-format)  # noqa: E501

        :return: The over_time_threshold1 of this Statute.  # noqa: E501
        :rtype: BigDecimal
        """
        return self._over_time_threshold1

    @over_time_threshold1.setter
    def over_time_threshold1(self, over_time_threshold1):
        """Sets the over_time_threshold1 of this Statute.

        The first time threshold for overtime (expressed as decimal in 24 hour-format)  # noqa: E501

        :param over_time_threshold1: The over_time_threshold1 of this Statute.  # noqa: E501
        :type: BigDecimal
        """

        self._over_time_threshold1 = over_time_threshold1

    @property
    def over_time_raise1(self):
        """Gets the over_time_raise1 of this Statute.  # noqa: E501

        The raise after the first time threshold for overtime (e.q. 1.2 means a 20% raise per hour)  # noqa: E501

        :return: The over_time_raise1 of this Statute.  # noqa: E501
        :rtype: BigDecimal
        """
        return self._over_time_raise1

    @over_time_raise1.setter
    def over_time_raise1(self, over_time_raise1):
        """Sets the over_time_raise1 of this Statute.

        The raise after the first time threshold for overtime (e.q. 1.2 means a 20% raise per hour)  # noqa: E501

        :param over_time_raise1: The over_time_raise1 of this Statute.  # noqa: E501
        :type: BigDecimal
        """

        self._over_time_raise1 = over_time_raise1

    @property
    def over_time_threshold2(self):
        """Gets the over_time_threshold2 of this Statute.  # noqa: E501

        The second time threshold for overtime (expressed as decimal in 24 hour-format)  # noqa: E501

        :return: The over_time_threshold2 of this Statute.  # noqa: E501
        :rtype: BigDecimal
        """
        return self._over_time_threshold2

    @over_time_threshold2.setter
    def over_time_threshold2(self, over_time_threshold2):
        """Sets the over_time_threshold2 of this Statute.

        The second time threshold for overtime (expressed as decimal in 24 hour-format)  # noqa: E501

        :param over_time_threshold2: The over_time_threshold2 of this Statute.  # noqa: E501
        :type: BigDecimal
        """

        self._over_time_threshold2 = over_time_threshold2

    @property
    def over_time_raise2(self):
        """Gets the over_time_raise2 of this Statute.  # noqa: E501

        The raise after the second time threshold for overtime (e.q. 1.2 means a 20% raise per hour)  # noqa: E501

        :return: The over_time_raise2 of this Statute.  # noqa: E501
        :rtype: BigDecimal
        """
        return self._over_time_raise2

    @over_time_raise2.setter
    def over_time_raise2(self, over_time_raise2):
        """Sets the over_time_raise2 of this Statute.

        The raise after the second time threshold for overtime (e.q. 1.2 means a 20% raise per hour)  # noqa: E501

        :param over_time_raise2: The over_time_raise2 of this Statute.  # noqa: E501
        :type: BigDecimal
        """

        self._over_time_raise2 = over_time_raise2

    @property
    def over_time_weekly_threshold1(self):
        """Gets the over_time_weekly_threshold1 of this Statute.  # noqa: E501

        The number of hours per week after which a \"weekly overtime\" raise should be given  # noqa: E501

        :return: The over_time_weekly_threshold1 of this Statute.  # noqa: E501
        :rtype: BigDecimal
        """
        return self._over_time_weekly_threshold1

    @over_time_weekly_threshold1.setter
    def over_time_weekly_threshold1(self, over_time_weekly_threshold1):
        """Sets the over_time_weekly_threshold1 of this Statute.

        The number of hours per week after which a \"weekly overtime\" raise should be given  # noqa: E501

        :param over_time_weekly_threshold1: The over_time_weekly_threshold1 of this Statute.  # noqa: E501
        :type: BigDecimal
        """

        self._over_time_weekly_threshold1 = over_time_weekly_threshold1

    @property
    def over_time_weekly_raise1(self):
        """Gets the over_time_weekly_raise1 of this Statute.  # noqa: E501

        The weekly overtime raise (e.q. 1.2 means a 20% raise per hour)  # noqa: E501

        :return: The over_time_weekly_raise1 of this Statute.  # noqa: E501
        :rtype: BigDecimal
        """
        return self._over_time_weekly_raise1

    @over_time_weekly_raise1.setter
    def over_time_weekly_raise1(self, over_time_weekly_raise1):
        """Sets the over_time_weekly_raise1 of this Statute.

        The weekly overtime raise (e.q. 1.2 means a 20% raise per hour)  # noqa: E501

        :param over_time_weekly_raise1: The over_time_weekly_raise1 of this Statute.  # noqa: E501
        :type: BigDecimal
        """

        self._over_time_weekly_raise1 = over_time_weekly_raise1

    @property
    def nightly_threshold1(self):
        """Gets the nightly_threshold1 of this Statute.  # noqa: E501

        The time threshold to be considered for a night raise (expressed as decimal in 24 hour-format)  # noqa: E501

        :return: The nightly_threshold1 of this Statute.  # noqa: E501
        :rtype: BigDecimal
        """
        return self._nightly_threshold1

    @nightly_threshold1.setter
    def nightly_threshold1(self, nightly_threshold1):
        """Sets the nightly_threshold1 of this Statute.

        The time threshold to be considered for a night raise (expressed as decimal in 24 hour-format)  # noqa: E501

        :param nightly_threshold1: The nightly_threshold1 of this Statute.  # noqa: E501
        :type: BigDecimal
        """

        self._nightly_threshold1 = nightly_threshold1

    @property
    def nightly_raise(self):
        """Gets the nightly_raise of this Statute.  # noqa: E501

        The raise after the first time threshold for overtime (e.q. 1.2 means a 20% raise per hour)  # noqa: E501

        :return: The nightly_raise of this Statute.  # noqa: E501
        :rtype: BigDecimal
        """
        return self._nightly_raise

    @nightly_raise.setter
    def nightly_raise(self, nightly_raise):
        """Sets the nightly_raise of this Statute.

        The raise after the first time threshold for overtime (e.q. 1.2 means a 20% raise per hour)  # noqa: E501

        :param nightly_raise: The nightly_raise of this Statute.  # noqa: E501
        :type: BigDecimal
        """

        self._nightly_raise = nightly_raise

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Statute, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Statute):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

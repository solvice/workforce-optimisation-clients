/* 
 * Workforce Optimisation API
 *
 * Solver engine for solving workforce optimisation problems through the Solvice Optimisation API Platform.  # Workforce Optimisation   Creating an optimal roster for a team of employees based on forecasted demand and taking into account extensive labor agreement rules & constraints.   The Solvice Workforce Optimisation API consists of the following RESTful web services:  * [Shift Planning API](#tag/shift)  * [Task Planning API](#tag/task)  ### Getting started  1. To use one of these APIs, you require an API key. Sign up [here](https://www.solvice.io/onshift/register) to get one.  2. Read the documentation of the desired API below.  3. Start using the API.  To use our Workforce Optimisation API commercially, you can subscribe to a paid plan [here](https://www.solvice.io/onshift/api#pricing).  ### Problems or Questions? If you have problems or questions, we offer you the following options:  * [FAQ](https://www.solvice.io/faq)  * [Open ticket]()  * [Contact us](https://www.solvice.io/contact)  ### Keep up-to-date To get informed about the newest features and development follow us at [twitter](https://twitter.com/solvice_io/). Furthermore you can watch [this git repository](https://github.com/solvice/workforce-api-docs) of this documentation, sign up at our [dashboard](https://dashboard.solvice.io/).   # SDKs  For easier integration start by picking a client library in your language of choice:   - [Java SDK]()  - [Javascript SDK]()  - [Csharp SDK ]()  - [PHP SDK]()     # Explore our APIs   #### Insomnia  To explore our APIs with [Insomnia](https://insomnia.rest/), follow these steps: 1. Open Insomnia and Import [our workspace](https://raw.githubusercontent.com/solvice/workforce-api-docs/master/web/restclients/onshift-insomnia.json). 2. Sign up to get an API key and specify it in your workspace: Manage Environments -> Base Environment -> \"JWT token\": your API key 3. Start exploring  #### Postman To explore our APIs with [Postman](https://www.getpostman.com/), follow these steps: 1. Import our [request collections](https://raw.githubusercontent.com/solvice/workforce-api-doc/master/web/restclients/onshift.postman_collection.json) as well as our [environment file](https://raw.githubusercontent.com/solvice/workforce-api-docs/master/web/restclients/onshift-postman.json). 2. Sign up to get an API key and specify it in your environment: \"api_key\": your API key 3. Start exploring 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: info@solvice.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ShiftRequest
    /// </summary>
    [DataContract]
        public partial class ShiftRequest : SolveJob,  IEquatable<ShiftRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShiftRequest" /> class.
        /// </summary>
        /// <param name="">Demand blocks for which a certain number of employees by a certain skill and on a certain location are required. (required).</param>
        /// <param name="">Group of employees available to be planned in the planning period defined by the demand. (required).</param>
        /// <param name="">Statute definitions used by employees. (required).</param>
        /// <param name="">Pre made assignments that the solver should take into account.</param>
        public ShiftRequest(List<Demand>  = default(List<Demand>), List<Employee>  = default(List<Employee>), List<Statute>  = default(List<Statute>), List<ShiftAssignment>  = default(List<ShiftAssignment>), Solver?  = default(Solver?), string  = default(string)) : base(, )
        {
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new InvalidDataException(" is a required property for ShiftRequest and cannot be null");
            }
            else
            {
                this.Demand = ;
            }
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new InvalidDataException(" is a required property for ShiftRequest and cannot be null");
            }
            else
            {
                this.Employees = ;
            }
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new InvalidDataException(" is a required property for ShiftRequest and cannot be null");
            }
            else
            {
                this.Statutes = ;
            }
            this.Assignments = ;
        }
        
        /// <summary>
        /// Demand blocks for which a certain number of employees by a certain skill and on a certain location are required.
        /// </summary>
        /// <value>Demand blocks for which a certain number of employees by a certain skill and on a certain location are required.</value>
        [DataMember(Name="demand", EmitDefaultValue=false)]
        public List<Demand> Demand { get; set; }

        /// <summary>
        /// Group of employees available to be planned in the planning period defined by the demand.
        /// </summary>
        /// <value>Group of employees available to be planned in the planning period defined by the demand.</value>
        [DataMember(Name="employees", EmitDefaultValue=false)]
        public List<Employee> Employees { get; set; }

        /// <summary>
        /// Statute definitions used by employees.
        /// </summary>
        /// <value>Statute definitions used by employees.</value>
        [DataMember(Name="statutes", EmitDefaultValue=false)]
        public List<Statute> Statutes { get; set; }

        /// <summary>
        /// Pre made assignments that the solver should take into account
        /// </summary>
        /// <value>Pre made assignments that the solver should take into account</value>
        [DataMember(Name="assignments", EmitDefaultValue=false)]
        public List<ShiftAssignment> Assignments { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ShiftRequest {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Demand: ").Append(Demand).Append("\n");
            sb.Append("  Employees: ").Append(Employees).Append("\n");
            sb.Append("  Statutes: ").Append(Statutes).Append("\n");
            sb.Append("  Assignments: ").Append(Assignments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShiftRequest);
        }

        /// <summary>
        /// Returns true if ShiftRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ShiftRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShiftRequest input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.Demand == input.Demand ||
                    this.Demand != null &&
                    this.Demand.SequenceEqual(input.Demand)
                ) && base.Equals(input) && 
                (
                    this.Employees == input.Employees ||
                    this.Employees != null &&
                    this.Employees.SequenceEqual(input.Employees)
                ) && base.Equals(input) && 
                (
                    this.Statutes == input.Statutes ||
                    this.Statutes != null &&
                    this.Statutes.SequenceEqual(input.Statutes)
                ) && base.Equals(input) && 
                (
                    this.Assignments == input.Assignments ||
                    this.Assignments != null &&
                    this.Assignments.SequenceEqual(input.Assignments)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Demand != null)
                    hashCode = hashCode * 59 + this.Demand.GetHashCode();
                if (this.Employees != null)
                    hashCode = hashCode * 59 + this.Employees.GetHashCode();
                if (this.Statutes != null)
                    hashCode = hashCode * 59 + this.Statutes.GetHashCode();
                if (this.Assignments != null)
                    hashCode = hashCode * 59 + this.Assignments.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }
}

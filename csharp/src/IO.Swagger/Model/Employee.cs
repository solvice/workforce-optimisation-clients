/* 
 * Workforce Optimisation API
 *
 * Solver engine for solving workforce optimisation problems through the Solvice Optimisation API Platform.  # Workforce Optimisation   Creating an optimal roster for a team of employees based on forecasted demand and taking into account extensive labor agreement rules & constraints.   The Solvice Workforce Optimisation API consists of the following RESTful web services:  * [Shift Planning API](#tag/shift)  * [Task Planning API](#tag/task)  ### Getting started  1. To use one of these APIs, you require an API key. Sign up [here](https://www.solvice.io/onshift/register) to get one.  2. Read the documentation of the desired API below.  3. Start using the API.  To use our Workforce Optimisation API commercially, you can subscribe to a paid plan [here](https://www.solvice.io/onshift/api#pricing).  ### Problems or Questions? If you have problems or questions, we offer you the following options:  * [FAQ](https://www.solvice.io/faq)  * [Open ticket]()  * [Contact us](https://www.solvice.io/contact)  ### Keep up-to-date To get informed about the newest features and development follow us at [twitter](https://twitter.com/solvice_io/). Furthermore you can watch [this git repository](https://github.com/solvice/workforce-api-docs) of this documentation, sign up at our [dashboard](https://dashboard.solvice.io/).   # SDKs  For easier integration start by picking a client library in your language of choice:   - [Java SDK]()  - [Javascript SDK]()  - [Csharp SDK ]()  - [PHP SDK]()     # Explore our APIs   #### Insomnia  To explore our APIs with [Insomnia](https://insomnia.rest/), follow these steps: 1. Open Insomnia and Import [our workspace](https://raw.githubusercontent.com/solvice/workforce-api-docs/master/web/restclients/onshift-insomnia.json). 2. Sign up to get an API key and specify it in your workspace: Manage Environments -> Base Environment -> \"JWT token\": your API key 3. Start exploring  #### Postman To explore our APIs with [Postman](https://www.getpostman.com/), follow these steps: 1. Import our [request collections](https://raw.githubusercontent.com/solvice/workforce-api-doc/master/web/restclients/onshift.postman_collection.json) as well as our [environment file](https://raw.githubusercontent.com/solvice/workforce-api-docs/master/web/restclients/onshift-postman.json). 2. Sign up to get an API key and specify it in your environment: \"api_key\": your API key 3. Start exploring 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: info@solvice.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Employee
    /// </summary>
    [DataContract]
        public partial class Employee :  IEquatable<Employee>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Employee" /> class.
        /// </summary>
        /// <param name="">Unique name/id of employee (required).</param>
        /// <param name="">Reference to Statute name (required).</param>
        /// <param name="">Skill name owned by employee (required).</param>
        /// <param name="">Efficiency rate of employee. 1.0 is normal and default.</param>
        /// <param name="">Hourly wage/pay for employee. Total costs are minimised by the optimiser..</param>
        /// <param name="">The last date on which the employee had a rest before the planning period..</param>
        public Employee(string  = default(string), string  = default(string), string  = default(string), BigDecimal  = default(BigDecimal), BigDecimal  = default(BigDecimal), DateTime?  = default(DateTime?))
        {
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new InvalidDataException(" is a required property for Employee and cannot be null");
            }
            else
            {
                this.Name = ;
            }
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new InvalidDataException(" is a required property for Employee and cannot be null");
            }
            else
            {
                this.Statute = ;
            }
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new InvalidDataException(" is a required property for Employee and cannot be null");
            }
            else
            {
                this.Skill = ;
            }
            this.Efficiency = ;
            this.HourlyPay = ;
            this.LastRestDate = ;
        }
        
        /// <summary>
        /// Unique name/id of employee
        /// </summary>
        /// <value>Unique name/id of employee</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Reference to Statute name
        /// </summary>
        /// <value>Reference to Statute name</value>
        [DataMember(Name="statute", EmitDefaultValue=false)]
        public string Statute { get; set; }

        /// <summary>
        /// Skill name owned by employee
        /// </summary>
        /// <value>Skill name owned by employee</value>
        [DataMember(Name="skill", EmitDefaultValue=false)]
        public string Skill { get; set; }

        /// <summary>
        /// Efficiency rate of employee. 1.0 is normal and default
        /// </summary>
        /// <value>Efficiency rate of employee. 1.0 is normal and default</value>
        [DataMember(Name="efficiency", EmitDefaultValue=false)]
        public BigDecimal Efficiency { get; set; }

        /// <summary>
        /// Hourly wage/pay for employee. Total costs are minimised by the optimiser.
        /// </summary>
        /// <value>Hourly wage/pay for employee. Total costs are minimised by the optimiser.</value>
        [DataMember(Name="hourlyPay", EmitDefaultValue=false)]
        public BigDecimal HourlyPay { get; set; }

        /// <summary>
        /// The last date on which the employee had a rest before the planning period.
        /// </summary>
        /// <value>The last date on which the employee had a rest before the planning period.</value>
        [DataMember(Name="lastRestDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? LastRestDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Employee {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Statute: ").Append(Statute).Append("\n");
            sb.Append("  Skill: ").Append(Skill).Append("\n");
            sb.Append("  Efficiency: ").Append(Efficiency).Append("\n");
            sb.Append("  HourlyPay: ").Append(HourlyPay).Append("\n");
            sb.Append("  LastRestDate: ").Append(LastRestDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Employee);
        }

        /// <summary>
        /// Returns true if Employee instances are equal
        /// </summary>
        /// <param name="input">Instance of Employee to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Employee input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Statute == input.Statute ||
                    (this.Statute != null &&
                    this.Statute.Equals(input.Statute))
                ) && 
                (
                    this.Skill == input.Skill ||
                    (this.Skill != null &&
                    this.Skill.Equals(input.Skill))
                ) && 
                (
                    this.Efficiency == input.Efficiency ||
                    (this.Efficiency != null &&
                    this.Efficiency.Equals(input.Efficiency))
                ) && 
                (
                    this.HourlyPay == input.HourlyPay ||
                    (this.HourlyPay != null &&
                    this.HourlyPay.Equals(input.HourlyPay))
                ) && 
                (
                    this.LastRestDate == input.LastRestDate ||
                    (this.LastRestDate != null &&
                    this.LastRestDate.Equals(input.LastRestDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Statute != null)
                    hashCode = hashCode * 59 + this.Statute.GetHashCode();
                if (this.Skill != null)
                    hashCode = hashCode * 59 + this.Skill.GetHashCode();
                if (this.Efficiency != null)
                    hashCode = hashCode * 59 + this.Efficiency.GetHashCode();
                if (this.HourlyPay != null)
                    hashCode = hashCode * 59 + this.HourlyPay.GetHashCode();
                if (this.LastRestDate != null)
                    hashCode = hashCode * 59 + this.LastRestDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

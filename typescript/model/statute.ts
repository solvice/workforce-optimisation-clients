/**
 * Workforce Optimisation API
 * Solver engine for solving workforce optimisation problems through the Solvice Optimisation API Platform.  # Workforce Optimisation   Creating an optimal roster for a team of employees based on forecasted demand and taking into account extensive labor agreement rules & constraints.   The Solvice Workforce Optimisation API consists of the following RESTful web services:  * [Shift Planning API](#tag/shift)  * [Task Planning API](#tag/task)  ### Getting started  1. To use one of these APIs, you require an API key. Sign up [here](https://www.solvice.io/onshift/register) to get one.  2. Read the documentation of the desired API below.  3. Start using the API.  To use our Workforce Optimisation API commercially, you can subscribe to a paid plan [here](https://www.solvice.io/onshift/api#pricing).  ### Problems or Questions? If you have problems or questions, we offer you the following options:  * [FAQ](https://www.solvice.io/faq)  * [Open ticket]()  * [Contact us](https://www.solvice.io/contact)  ### Keep up-to-date To get informed about the newest features and development follow us at [twitter](https://twitter.com/solvice_io/). Furthermore you can watch [this git repository](https://github.com/solvice/workforce-api-docs) of this documentation, sign up at our [dashboard](https://dashboard.solvice.io/).   # SDKs  For easier integration start by picking a client library in your language of choice:   - [Java SDK]()  - [Javascript SDK]()  - [Csharp SDK ]()  - [PHP SDK]()     # Explore our APIs   #### Insomnia  To explore our APIs with [Insomnia](https://insomnia.rest/), follow these steps: 1. Open Insomnia and Import [our workspace](https://raw.githubusercontent.com/solvice/workforce-api-docs/master/web/restclients/onshift-insomnia.json). 2. Sign up to get an API key and specify it in your workspace: Manage Environments -> Base Environment -> \"JWT token\": your API key 3. Start exploring  #### Postman To explore our APIs with [Postman](https://www.getpostman.com/), follow these steps: 1. Import our [request collections](https://raw.githubusercontent.com/solvice/workforce-api-doc/master/web/restclients/onshift.postman_collection.json) as well as our [environment file](https://raw.githubusercontent.com/solvice/workforce-api-docs/master/web/restclients/onshift-postman.json). 2. Sign up to get an API key and specify it in your environment: \"api_key\": your API key 3. Start exploring 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: info@solvice.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */import { BigDecimal } from './bigDecimal';


export interface Statute { 
    /**
     * Unique name for a definition of a statute.
     */
    name: string;
    /**
     * The minimum number of hours in a shift for an employee
     */
    minShiftLength?: number;
    /**
     * The maximum number of hours in a shift for an employee
     */
    maxShiftLength?: number;
    /**
     * The minimum duration (in hours) of a rest period between two shifts for this employee
     */
    minRestBetweenShifts?: number;
    /**
     * The maximum days consecutive that this employee can be working
     */
    maxConsecutiveWorkDays?: number;
    /**
     * The maximum number of hours this employee can be working in a week
     */
    maxHrsPerWeek?: number;
    /**
     * The minimum number of hours this employee should be working in a week
     */
    minHrsPerWeek?: number;
    /**
     * The earliest this employee can start working (expressed as decimal in 24 hour-format)
     */
    shiftStart?: BigDecimal;
    /**
     * The latest this employee can start working (expressed as decimal in 24 hour-format)
     */
    latestShiftStart?: BigDecimal;
    /**
     * The latest this employee can work on a day (expressed as decimal in 24 hour-format)
     */
    shiftEnd?: BigDecimal;
    /**
     * The minimum hours per month this employee should be working
     */
    minHoursMonth?: number;
    /**
     * The maximum hours per month this employee should be working
     */
    maxHoursMonth?: number;
    /**
     * The first time threshold for overtime (expressed as decimal in 24 hour-format)
     */
    overTimeThreshold1?: BigDecimal;
    /**
     * The raise after the first time threshold for overtime (e.q. 1.2 means a 20% raise per hour)
     */
    overTimeRaise1?: BigDecimal;
    /**
     * The second time threshold for overtime (expressed as decimal in 24 hour-format)
     */
    overTimeThreshold2?: BigDecimal;
    /**
     * The raise after the second time threshold for overtime (e.q. 1.2 means a 20% raise per hour)
     */
    overTimeRaise2?: BigDecimal;
    /**
     * The number of hours per week after which a \"weekly overtime\" raise should be given
     */
    overTimeWeeklyThreshold1?: BigDecimal;
    /**
     * The weekly overtime raise (e.q. 1.2 means a 20% raise per hour)
     */
    overTimeWeeklyRaise1?: BigDecimal;
    /**
     * The time threshold to be considered for a night raise (expressed as decimal in 24 hour-format)
     */
    nightlyThreshold1?: BigDecimal;
    /**
     * The raise after the first time threshold for overtime (e.q. 1.2 means a 20% raise per hour)
     */
    nightlyRaise?: BigDecimal;
}
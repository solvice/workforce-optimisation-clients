<?php
/**
 * Statute
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Workforce Optimisation API
 *
 * Solver engine for solving workforce optimisation problems through the Solvice Optimisation API Platform.  # Workforce Optimisation   Creating an optimal roster for a team of employees based on forecasted demand and taking into account extensive labor agreement rules & constraints.   The Solvice Workforce Optimisation API consists of the following RESTful web services:  * [Shift Planning API](#tag/shift)  * [Task Planning API](#tag/task)  ### Getting started  1. To use one of these APIs, you require an API key. Sign up [here](https://www.solvice.io/onshift/register) to get one.  2. Read the documentation of the desired API below.  3. Start using the API.  To use our Workforce Optimisation API commercially, you can subscribe to a paid plan [here](https://www.solvice.io/onshift/api#pricing).  ### Problems or Questions? If you have problems or questions, we offer you the following options:  * [FAQ](https://www.solvice.io/faq)  * [Open ticket]()  * [Contact us](https://www.solvice.io/contact)  ### Keep up-to-date To get informed about the newest features and development follow us at [twitter](https://twitter.com/solvice_io/). Furthermore you can watch [this git repository](https://github.com/solvice/workforce-api-docs) of this documentation, sign up at our [dashboard](https://dashboard.solvice.io/).   # SDKs  For easier integration start by picking a client library in your language of choice:   - [Java SDK]()  - [Javascript SDK]()  - [Csharp SDK ]()  - [PHP SDK]()     # Explore our APIs   #### Insomnia  To explore our APIs with [Insomnia](https://insomnia.rest/), follow these steps: 1. Open Insomnia and Import [our workspace](https://raw.githubusercontent.com/solvice/workforce-api-docs/master/web/restclients/onshift-insomnia.json). 2. Sign up to get an API key and specify it in your workspace: Manage Environments -> Base Environment -> \"JWT token\": your API key 3. Start exploring  #### Postman To explore our APIs with [Postman](https://www.getpostman.com/), follow these steps: 1. Import our [request collections](https://raw.githubusercontent.com/solvice/workforce-api-doc/master/web/restclients/onshift.postman_collection.json) as well as our [environment file](https://raw.githubusercontent.com/solvice/workforce-api-docs/master/web/restclients/onshift-postman.json). 2. Sign up to get an API key and specify it in your environment: \"api_key\": your API key 3. Start exploring
 *
 * OpenAPI spec version: 1.0.0
 * Contact: info@solvice.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.8
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Statute Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Statute implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Statute';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
'min_shift_length' => 'int',
'max_shift_length' => 'int',
'min_rest_between_shifts' => 'int',
'max_consecutive_work_days' => 'int',
'max_hrs_per_week' => 'int',
'min_hrs_per_week' => 'int',
'shift_start' => 'BigDecimal',
'latest_shift_start' => 'BigDecimal',
'shift_end' => 'BigDecimal',
'min_hours_month' => 'int',
'max_hours_month' => 'int',
'over_time_threshold1' => 'BigDecimal',
'over_time_raise1' => 'BigDecimal',
'over_time_threshold2' => 'BigDecimal',
'over_time_raise2' => 'BigDecimal',
'over_time_weekly_threshold1' => 'BigDecimal',
'over_time_weekly_raise1' => 'BigDecimal',
'nightly_threshold1' => 'BigDecimal',
'nightly_raise' => 'BigDecimal'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
'min_shift_length' => null,
'max_shift_length' => null,
'min_rest_between_shifts' => null,
'max_consecutive_work_days' => null,
'max_hrs_per_week' => null,
'min_hrs_per_week' => null,
'shift_start' => null,
'latest_shift_start' => null,
'shift_end' => null,
'min_hours_month' => null,
'max_hours_month' => null,
'over_time_threshold1' => null,
'over_time_raise1' => null,
'over_time_threshold2' => null,
'over_time_raise2' => null,
'over_time_weekly_threshold1' => null,
'over_time_weekly_raise1' => null,
'nightly_threshold1' => null,
'nightly_raise' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
'min_shift_length' => 'minShiftLength',
'max_shift_length' => 'maxShiftLength',
'min_rest_between_shifts' => 'minRestBetweenShifts',
'max_consecutive_work_days' => 'maxConsecutiveWorkDays',
'max_hrs_per_week' => 'maxHrsPerWeek',
'min_hrs_per_week' => 'minHrsPerWeek',
'shift_start' => 'shiftStart',
'latest_shift_start' => 'latestShiftStart',
'shift_end' => 'shiftEnd',
'min_hours_month' => 'minHoursMonth',
'max_hours_month' => 'maxHoursMonth',
'over_time_threshold1' => 'overTimeThreshold1',
'over_time_raise1' => 'overTimeRaise1',
'over_time_threshold2' => 'overTimeThreshold2',
'over_time_raise2' => 'overTimeRaise2',
'over_time_weekly_threshold1' => 'overTimeWeeklyThreshold1',
'over_time_weekly_raise1' => 'overTimeWeeklyRaise1',
'nightly_threshold1' => 'nightlyThreshold1',
'nightly_raise' => 'nightlyRaise'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
'min_shift_length' => 'setMinShiftLength',
'max_shift_length' => 'setMaxShiftLength',
'min_rest_between_shifts' => 'setMinRestBetweenShifts',
'max_consecutive_work_days' => 'setMaxConsecutiveWorkDays',
'max_hrs_per_week' => 'setMaxHrsPerWeek',
'min_hrs_per_week' => 'setMinHrsPerWeek',
'shift_start' => 'setShiftStart',
'latest_shift_start' => 'setLatestShiftStart',
'shift_end' => 'setShiftEnd',
'min_hours_month' => 'setMinHoursMonth',
'max_hours_month' => 'setMaxHoursMonth',
'over_time_threshold1' => 'setOverTimeThreshold1',
'over_time_raise1' => 'setOverTimeRaise1',
'over_time_threshold2' => 'setOverTimeThreshold2',
'over_time_raise2' => 'setOverTimeRaise2',
'over_time_weekly_threshold1' => 'setOverTimeWeeklyThreshold1',
'over_time_weekly_raise1' => 'setOverTimeWeeklyRaise1',
'nightly_threshold1' => 'setNightlyThreshold1',
'nightly_raise' => 'setNightlyRaise'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
'min_shift_length' => 'getMinShiftLength',
'max_shift_length' => 'getMaxShiftLength',
'min_rest_between_shifts' => 'getMinRestBetweenShifts',
'max_consecutive_work_days' => 'getMaxConsecutiveWorkDays',
'max_hrs_per_week' => 'getMaxHrsPerWeek',
'min_hrs_per_week' => 'getMinHrsPerWeek',
'shift_start' => 'getShiftStart',
'latest_shift_start' => 'getLatestShiftStart',
'shift_end' => 'getShiftEnd',
'min_hours_month' => 'getMinHoursMonth',
'max_hours_month' => 'getMaxHoursMonth',
'over_time_threshold1' => 'getOverTimeThreshold1',
'over_time_raise1' => 'getOverTimeRaise1',
'over_time_threshold2' => 'getOverTimeThreshold2',
'over_time_raise2' => 'getOverTimeRaise2',
'over_time_weekly_threshold1' => 'getOverTimeWeeklyThreshold1',
'over_time_weekly_raise1' => 'getOverTimeWeeklyRaise1',
'nightly_threshold1' => 'getNightlyThreshold1',
'nightly_raise' => 'getNightlyRaise'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['min_shift_length'] = isset($data['min_shift_length']) ? $data['min_shift_length'] : null;
        $this->container['max_shift_length'] = isset($data['max_shift_length']) ? $data['max_shift_length'] : null;
        $this->container['min_rest_between_shifts'] = isset($data['min_rest_between_shifts']) ? $data['min_rest_between_shifts'] : null;
        $this->container['max_consecutive_work_days'] = isset($data['max_consecutive_work_days']) ? $data['max_consecutive_work_days'] : null;
        $this->container['max_hrs_per_week'] = isset($data['max_hrs_per_week']) ? $data['max_hrs_per_week'] : null;
        $this->container['min_hrs_per_week'] = isset($data['min_hrs_per_week']) ? $data['min_hrs_per_week'] : null;
        $this->container['shift_start'] = isset($data['shift_start']) ? $data['shift_start'] : null;
        $this->container['latest_shift_start'] = isset($data['latest_shift_start']) ? $data['latest_shift_start'] : null;
        $this->container['shift_end'] = isset($data['shift_end']) ? $data['shift_end'] : null;
        $this->container['min_hours_month'] = isset($data['min_hours_month']) ? $data['min_hours_month'] : null;
        $this->container['max_hours_month'] = isset($data['max_hours_month']) ? $data['max_hours_month'] : null;
        $this->container['over_time_threshold1'] = isset($data['over_time_threshold1']) ? $data['over_time_threshold1'] : null;
        $this->container['over_time_raise1'] = isset($data['over_time_raise1']) ? $data['over_time_raise1'] : null;
        $this->container['over_time_threshold2'] = isset($data['over_time_threshold2']) ? $data['over_time_threshold2'] : null;
        $this->container['over_time_raise2'] = isset($data['over_time_raise2']) ? $data['over_time_raise2'] : null;
        $this->container['over_time_weekly_threshold1'] = isset($data['over_time_weekly_threshold1']) ? $data['over_time_weekly_threshold1'] : null;
        $this->container['over_time_weekly_raise1'] = isset($data['over_time_weekly_raise1']) ? $data['over_time_weekly_raise1'] : null;
        $this->container['nightly_threshold1'] = isset($data['nightly_threshold1']) ? $data['nightly_threshold1'] : null;
        $this->container['nightly_raise'] = isset($data['nightly_raise']) ? $data['nightly_raise'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Unique name for a definition of a statute.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets min_shift_length
     *
     * @return int
     */
    public function getMinShiftLength()
    {
        return $this->container['min_shift_length'];
    }

    /**
     * Sets min_shift_length
     *
     * @param int $min_shift_length The minimum number of hours in a shift for an employee
     *
     * @return $this
     */
    public function setMinShiftLength($min_shift_length)
    {
        $this->container['min_shift_length'] = $min_shift_length;

        return $this;
    }

    /**
     * Gets max_shift_length
     *
     * @return int
     */
    public function getMaxShiftLength()
    {
        return $this->container['max_shift_length'];
    }

    /**
     * Sets max_shift_length
     *
     * @param int $max_shift_length The maximum number of hours in a shift for an employee
     *
     * @return $this
     */
    public function setMaxShiftLength($max_shift_length)
    {
        $this->container['max_shift_length'] = $max_shift_length;

        return $this;
    }

    /**
     * Gets min_rest_between_shifts
     *
     * @return int
     */
    public function getMinRestBetweenShifts()
    {
        return $this->container['min_rest_between_shifts'];
    }

    /**
     * Sets min_rest_between_shifts
     *
     * @param int $min_rest_between_shifts The minimum duration (in hours) of a rest period between two shifts for this employee
     *
     * @return $this
     */
    public function setMinRestBetweenShifts($min_rest_between_shifts)
    {
        $this->container['min_rest_between_shifts'] = $min_rest_between_shifts;

        return $this;
    }

    /**
     * Gets max_consecutive_work_days
     *
     * @return int
     */
    public function getMaxConsecutiveWorkDays()
    {
        return $this->container['max_consecutive_work_days'];
    }

    /**
     * Sets max_consecutive_work_days
     *
     * @param int $max_consecutive_work_days The maximum days consecutive that this employee can be working
     *
     * @return $this
     */
    public function setMaxConsecutiveWorkDays($max_consecutive_work_days)
    {
        $this->container['max_consecutive_work_days'] = $max_consecutive_work_days;

        return $this;
    }

    /**
     * Gets max_hrs_per_week
     *
     * @return int
     */
    public function getMaxHrsPerWeek()
    {
        return $this->container['max_hrs_per_week'];
    }

    /**
     * Sets max_hrs_per_week
     *
     * @param int $max_hrs_per_week The maximum number of hours this employee can be working in a week
     *
     * @return $this
     */
    public function setMaxHrsPerWeek($max_hrs_per_week)
    {
        $this->container['max_hrs_per_week'] = $max_hrs_per_week;

        return $this;
    }

    /**
     * Gets min_hrs_per_week
     *
     * @return int
     */
    public function getMinHrsPerWeek()
    {
        return $this->container['min_hrs_per_week'];
    }

    /**
     * Sets min_hrs_per_week
     *
     * @param int $min_hrs_per_week The minimum number of hours this employee should be working in a week
     *
     * @return $this
     */
    public function setMinHrsPerWeek($min_hrs_per_week)
    {
        $this->container['min_hrs_per_week'] = $min_hrs_per_week;

        return $this;
    }

    /**
     * Gets shift_start
     *
     * @return BigDecimal
     */
    public function getShiftStart()
    {
        return $this->container['shift_start'];
    }

    /**
     * Sets shift_start
     *
     * @param BigDecimal $shift_start The earliest this employee can start working (expressed as decimal in 24 hour-format)
     *
     * @return $this
     */
    public function setShiftStart($shift_start)
    {
        $this->container['shift_start'] = $shift_start;

        return $this;
    }

    /**
     * Gets latest_shift_start
     *
     * @return BigDecimal
     */
    public function getLatestShiftStart()
    {
        return $this->container['latest_shift_start'];
    }

    /**
     * Sets latest_shift_start
     *
     * @param BigDecimal $latest_shift_start The latest this employee can start working (expressed as decimal in 24 hour-format)
     *
     * @return $this
     */
    public function setLatestShiftStart($latest_shift_start)
    {
        $this->container['latest_shift_start'] = $latest_shift_start;

        return $this;
    }

    /**
     * Gets shift_end
     *
     * @return BigDecimal
     */
    public function getShiftEnd()
    {
        return $this->container['shift_end'];
    }

    /**
     * Sets shift_end
     *
     * @param BigDecimal $shift_end The latest this employee can work on a day (expressed as decimal in 24 hour-format)
     *
     * @return $this
     */
    public function setShiftEnd($shift_end)
    {
        $this->container['shift_end'] = $shift_end;

        return $this;
    }

    /**
     * Gets min_hours_month
     *
     * @return int
     */
    public function getMinHoursMonth()
    {
        return $this->container['min_hours_month'];
    }

    /**
     * Sets min_hours_month
     *
     * @param int $min_hours_month The minimum hours per month this employee should be working
     *
     * @return $this
     */
    public function setMinHoursMonth($min_hours_month)
    {
        $this->container['min_hours_month'] = $min_hours_month;

        return $this;
    }

    /**
     * Gets max_hours_month
     *
     * @return int
     */
    public function getMaxHoursMonth()
    {
        return $this->container['max_hours_month'];
    }

    /**
     * Sets max_hours_month
     *
     * @param int $max_hours_month The maximum hours per month this employee should be working
     *
     * @return $this
     */
    public function setMaxHoursMonth($max_hours_month)
    {
        $this->container['max_hours_month'] = $max_hours_month;

        return $this;
    }

    /**
     * Gets over_time_threshold1
     *
     * @return BigDecimal
     */
    public function getOverTimeThreshold1()
    {
        return $this->container['over_time_threshold1'];
    }

    /**
     * Sets over_time_threshold1
     *
     * @param BigDecimal $over_time_threshold1 The first time threshold for overtime (expressed as decimal in 24 hour-format)
     *
     * @return $this
     */
    public function setOverTimeThreshold1($over_time_threshold1)
    {
        $this->container['over_time_threshold1'] = $over_time_threshold1;

        return $this;
    }

    /**
     * Gets over_time_raise1
     *
     * @return BigDecimal
     */
    public function getOverTimeRaise1()
    {
        return $this->container['over_time_raise1'];
    }

    /**
     * Sets over_time_raise1
     *
     * @param BigDecimal $over_time_raise1 The raise after the first time threshold for overtime (e.q. 1.2 means a 20% raise per hour)
     *
     * @return $this
     */
    public function setOverTimeRaise1($over_time_raise1)
    {
        $this->container['over_time_raise1'] = $over_time_raise1;

        return $this;
    }

    /**
     * Gets over_time_threshold2
     *
     * @return BigDecimal
     */
    public function getOverTimeThreshold2()
    {
        return $this->container['over_time_threshold2'];
    }

    /**
     * Sets over_time_threshold2
     *
     * @param BigDecimal $over_time_threshold2 The second time threshold for overtime (expressed as decimal in 24 hour-format)
     *
     * @return $this
     */
    public function setOverTimeThreshold2($over_time_threshold2)
    {
        $this->container['over_time_threshold2'] = $over_time_threshold2;

        return $this;
    }

    /**
     * Gets over_time_raise2
     *
     * @return BigDecimal
     */
    public function getOverTimeRaise2()
    {
        return $this->container['over_time_raise2'];
    }

    /**
     * Sets over_time_raise2
     *
     * @param BigDecimal $over_time_raise2 The raise after the second time threshold for overtime (e.q. 1.2 means a 20% raise per hour)
     *
     * @return $this
     */
    public function setOverTimeRaise2($over_time_raise2)
    {
        $this->container['over_time_raise2'] = $over_time_raise2;

        return $this;
    }

    /**
     * Gets over_time_weekly_threshold1
     *
     * @return BigDecimal
     */
    public function getOverTimeWeeklyThreshold1()
    {
        return $this->container['over_time_weekly_threshold1'];
    }

    /**
     * Sets over_time_weekly_threshold1
     *
     * @param BigDecimal $over_time_weekly_threshold1 The number of hours per week after which a \"weekly overtime\" raise should be given
     *
     * @return $this
     */
    public function setOverTimeWeeklyThreshold1($over_time_weekly_threshold1)
    {
        $this->container['over_time_weekly_threshold1'] = $over_time_weekly_threshold1;

        return $this;
    }

    /**
     * Gets over_time_weekly_raise1
     *
     * @return BigDecimal
     */
    public function getOverTimeWeeklyRaise1()
    {
        return $this->container['over_time_weekly_raise1'];
    }

    /**
     * Sets over_time_weekly_raise1
     *
     * @param BigDecimal $over_time_weekly_raise1 The weekly overtime raise (e.q. 1.2 means a 20% raise per hour)
     *
     * @return $this
     */
    public function setOverTimeWeeklyRaise1($over_time_weekly_raise1)
    {
        $this->container['over_time_weekly_raise1'] = $over_time_weekly_raise1;

        return $this;
    }

    /**
     * Gets nightly_threshold1
     *
     * @return BigDecimal
     */
    public function getNightlyThreshold1()
    {
        return $this->container['nightly_threshold1'];
    }

    /**
     * Sets nightly_threshold1
     *
     * @param BigDecimal $nightly_threshold1 The time threshold to be considered for a night raise (expressed as decimal in 24 hour-format)
     *
     * @return $this
     */
    public function setNightlyThreshold1($nightly_threshold1)
    {
        $this->container['nightly_threshold1'] = $nightly_threshold1;

        return $this;
    }

    /**
     * Gets nightly_raise
     *
     * @return BigDecimal
     */
    public function getNightlyRaise()
    {
        return $this->container['nightly_raise'];
    }

    /**
     * Sets nightly_raise
     *
     * @param BigDecimal $nightly_raise The raise after the first time threshold for overtime (e.q. 1.2 means a 20% raise per hour)
     *
     * @return $this
     */
    public function setNightlyRaise($nightly_raise)
    {
        $this->container['nightly_raise'] = $nightly_raise;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
